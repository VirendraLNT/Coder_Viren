
Environment-setup 
--------------------
    1. java 11 
        > java -version 

    2. eclipse or STS 

    3. mysql community server & mysql workbench 

    4. docker 
        > docker --version 

    5. nodejs
        > node -v 
        > npm -v 

    6. mongodb community edition 
            -> create below folders in C: 
                    c:\data\db 
            -> set env variable for mongodb 

            > mongod 


    Spring 
        - core, mvc, rest, data, cloud, security, boot 
        
    Microservices 
        - config server, service discovery/registry / naming server, api gateway, load balancing, 
                - service to service communication 

    Cloud / DevOps / docker 
        - AWS EC2, deploy java application 
        - CI / CD 
        - automate deployment 
        - version controlled 

    FrontEnd    
        - angular, react 



    Session1        - raise new topics, discussions, demontrations 

    Session2       - demontrations 

    session3        - self study / recall the topics / read / explore / learn from other resources 

    Session4        - practicals / hands-on / solve assignments / ask questions 




    Language                        library                         framework 

    Java                            standard libraries              spring 
                                    i.e. util, io, jdbc, etc.
                                    3rd party libraries 

    
    JavaScript                      jquery                          angular 

    Python                          ---                             ?

    C#/VB                           ----                            .net framework 

    Go                              -----                           ?

       |                            |                               |
    programming                 simplifies the tasks            standardize the process 
    capabilities 


    Spring
    -------------
        - what is spring framework ? 
            - application framework 

            - core, mvc, org, data etc. 


        - lightweight and loosely coupled?

        - spring modules / products ?

                - core 
                    - has thee implementation of IOC and supports dependency injection 
                    - responsible for maintaining object's life cycle 
                    - beans, core, context, spEL

                - web 
                    - web, servlet, websocket, porlet

                - data access / integration 
                    - jdbc, orm, oxm, jms, transactions

                - aop 

                - messaging  

                - test


        - IOC ? inversion of control
            -  it is principle that delegates the responsibility of
                 managing objects (?) or portions of programs to a "Container"

        - container ?
            - it is responsible to manage the life cycle of objects 
            - spring framework provides an interface called "ApplicationContext" which represents the IOC container 
                - there are many implementations of ApplicationContext 
                            - ClassPathXmlApplicationContext 
                            - FileSystemXmlApplicationContext  
                            - AnnotationConfigApplicationContext
                            - AnnotationConfigWebApplicationContext


        - spring beans ?
            - objects which are managed by the container 

        - ways to define beans in spring ? 

                1. using xml 

                        <bean id="" class="" .... .. .. ... ... />

                        <bean id="" class="">  
                            <property name=""><value>xxxx</value></property>
                            <property name="" value="" />
                        </bean> 

                        <bean id="" class="">  
                            <constructor-arg name="" value="" />
                        </bean> 

                        new ClassPathXmlApplicationContext("spring-beans.xml")

                2. using java 

                        @Configuration 
                        public class MyConfiguration {

                                @Bean 
                                public Employee createEmp(){
                                    //...
                                }
                        }

                3. annotation based configuration 

        Life Cycle methods
        ---------------------

                public void init() 
                    - write any initilization code i.e. loading some config, connecting to db, validation

                pbulic void destroy()
                        - write cleanup code 


                1. using xml 
                    <bean id="employee" class="demo1.Employee" init-method="init" destroy-method="destroy">
                        <property name="name" value="vishaal"/>
                    </bean>


                2. using java 
                    public class Employee implements InitializingBean, DisposableBean {

                            	public void afterPropertiesSet() throws Exception {
                                    // TODO Auto-generated method stub
                                    System.out.println("this is the place for initilization/validation/etc");
                                }

                                public void destroy() throws Exception {
                                    // TODO Auto-generated method stub
                                    System.out.println("releasing resources using destroy method ");
                                } 
                    }

                3. using annotation 



        Dependency Check 

        Bean Scopes 
            - using xml 
            - using @Scope 

        constructor injection 

        setter injection 

        @Value 

        auto wiring 

        @Qualifier 




        JDBC 
        -----------
            - robust, low level api
            - it takes several lines of code just to bind an object to sql query 
            - sql is not java / object oriented 
            - sql is not very easy to refactor 
            - hard to read / maintain 

            - in java, we deal with objects i.e. employee, book, product 



        ORM Frameworks
        -----------------
            - map java objects to relational tables 

                 Hibernate 
                 TopLink 
                 IBatis 
        JPA 
        ------------
            - java persistence api 
            - specifies standards for mapping objects to relational databases 
            - bridges gap between objects and rdbms 
            - relational mapping is made through metadata
            - it has an EntityManager api to perform db related operations 
            - JPA also specifies JPQL to retrieve data 
            - IT also has transaction mechanism 


        JPA Providers 
        ---------------
            - Hibernate JPA 
                - ORM framwork which implements JPA standards 

            - EclipseLink
            - MyBatis 



        JPA BASICS 
        --------------

            Entity
            ---------
                -  objects managed by EntityManager
                - when talking about mapping objects to a relational database, persisting objects, retrieving objects, 
                        the term 'Entity' is used 
                - Entities are mapped with relational tables 

                @Entity
                public class Employee {
                    
                    @Id 
                    private int id; 

                    public Employee(){

                    }

                    //getter/setter methods 
                }


            EntityManager 
            -----------
                - EntityManager is responsible to persist data in to the db 
                - it manages the state and lifecycle of entities, using JPQL it retrieves the entities 


            Persistentce Context 
            ----------------------
                - configuration for set of managed entities 

                - persistence.xml 
                    <persistence>
                            <persistence-unit name="pu1">

                            </persistence-unit>

                    </persistence>

            - persistent unit standard properites 
            -----------------------------------------

            <properties>
				<property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
				<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/mydb"/>
				<property name="javax.persistence.jdbc.user" value="root"/>
				<property name="javax.persistence.jdbc.password" value="suhroot123"/>
			</properties>


            CRUD 

            Default Mapping 

            Custom Mapping 

            Relationals / Inheritance 

            Query / Retrieve data 




        Spring Data JPA 
        -----------------
            - wrapper around jpa & jpa providers
            - offers easy integration with db and provides boilerplate code 

                - Spring Data JPA offers repository pattern
                - supports pagination, dynamic query execution, validation etc.  

                - transactions 

                - caching 


            - QueryDSL






            class EmployeeDAO {

                    private EntityManager manager;

                    EmployeeDAO(){
                        //create object of EntityManager
                    }

                    public Employee save(Employee emp){
                        //start tx 
                        manager.persist(emp);
                        //commit x
                    }

                    //..
            }





            with spring data jpa all you need to do is.. create a repository like below...

            interface EmployeeRepository extends JpaRepository<Employee, Integer>{

            }

            - spring data jpa will automatically provide a "proxy instance" implementing the 
                above interface 